{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs26 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // api/pestle-interpret.js\
export default async function handler(req, res) \{\
  // CORS headers (allow Squarespace to call this API)\
  res.setHeader("Access-Control-Allow-Origin", "https://www.navienta.com");\
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");\
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");\
  if (req.method === "OPTIONS") return res.status(200).end();\
\
  if (req.method !== "POST") \{\
    return res.status(405).json(\{ error: "Method not allowed" \});\
  \}\
\
  try \{\
    const body = typeof req.body === "string" ? JSON.parse(req.body) : (req.body || \{\});\
\
    const system = `\
You are a strategy analyst. Rewrite each user-provided Opportunity/Threat to be:\
- Specific, measurable where possible, clear (de-jargonized)\
- Include a one-sentence rationale\
- Add 2\'964 tags (Growth, Cost, Compliance, Technology, Talent, Sustainability, etc.)\
Return STRICT JSON ONLY with schema:\
\{\
 "dims": \{\
   "Political": \{"opps":[\{"original":"","suggested":"","rationale":"","tags":[]\}], "thrs":[]\},\
   "Economic": \{"opps":[], "thrs":[]\},\
   "Social": \{"opps":[], "thrs":[]\},\
   "Technological": \{"opps":[], "thrs":[]\},\
   "Legal": \{"opps":[], "thrs":[]\},\
   "Environmental": \{"opps":[], "thrs":[]\}\
 \}\
\}\
    `.trim();\
\
    const user = JSON.stringify(body);\
\
    const r = await fetch("https://api.openai.com/v1/chat/completions", \{\
      method: "POST",\
      headers: \{\
        "Content-Type": "application/json",\
        "Authorization": `Bearer $\{process.env.OPENAI_API_KEY\}`\
      \},\
      body: JSON.stringify(\{\
        model: "gpt-4o-mini",\
        temperature: 0.2,\
        response_format: \{ type: "json_object" \},\
        messages: [\
          \{ role: "system", content: system \},\
          \{ role: "user", content: user \}\
        ]\
      \})\
    \});\
\
    if (!r.ok) return res.status(500).json(\{ error: "LLM error", detail: await r.text() \});\
\
    const out = await r.json();\
    const text = out?.choices?.[0]?.message?.content || "\{\}";\
    const parsed = JSON.parse(text);\
\
    res.status(200).json(parsed);\
  \} catch (e) \{\
    res.status(500).json(\{ error: "Server error", detail: String(e) \});\
  \}\
\}\
}